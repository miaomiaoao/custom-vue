/**
 * 题目描述: 
 * 给你一个由1(陆地)和0(水)组成的二位网格，请你计算网格中岛屿的数量
 * 岛屿总是被水保卫，每座岛屿只能由水平方向或者竖直方向上相邻的陆地连接形成
 * 此外你可以假设该网格的四条边均被水包围
 */

 输入:
//  [
//  ['1','1','1','1','0'],
//  ['1','1','0','1','0'],
//  ['1','1','0','0','0'],
//  ['0','0','0','0','0']
//  ]
//  输出: 1


// 输入:
// [
// ['1','1','0','0','0'],
// ['1','1','0','0','0'],
// ['0','0','1','0','0'],
// ['0','0','0','1','1']
// ]
// 输出: 3
// 解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。

/**
 * 解题思路: 实际上就是说，所有在水平方向和竖直方向连在一起的算是一个岛屿，我们只要计算岛屿的数量即可
 * 1. 深度优先遍历，遍历所有元素，如果一个元素是1，就遍历其周围元素将其在水平与竖直方向的周围元素值为1的
 * 都变为0，然后累加岛屿的数量
 * 
 * 2. 广度优先遍历，将当前遍历到的元素存到队列中，然后检查其上下左右元素，如果是1，就放进队列，并将其变为0，
 * 一直取队列最后的元素进行上下左右的检查
 */

 

function numIsLands(grid) {
  if (grid.length < 1) return 0
  
  
}