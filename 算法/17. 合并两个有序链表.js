/**
 * 将两个升序链表合并为一个新的链表并返回
 * 1 -> 2 -> 4 , 1 -> 3 -> 4
 * 
 * 1 -> 1 -> 2 -> 3 -> 4 -> 4
 * 
 * 解题思路： 处理链表就是在处理链表之间指针的关系，这些指针就像是一条线一样
 * 将所有数据穿在一起，形成了一条链表
 * 
 * 我们需要每次对两个链表的节点进行对比，然后让当前指针指向相对较小的数，之后将指针指向调整到
 * 指向的数的后面，这样一次对比完两个节点，就可以实现两个链表的有序合并
 * 
 * 需要注意的是，我们需要考虑链表长度不同的情况，由于两个链表都是有序的，如果有一条链表完成了
 * 另外一条链表没有遍历完，就直接将没有遍历完的部分放在新的链表后面就可以了
 */


function mergeTwoLink(l1, l2) {
  // 定义新链表的头节点
  let head = new ListNode()

  let cur = head

  while(l1 && l2) {
    if (l1.val < l2.val) {
      cur.next = l1
      l1 = l1.next
    } else {
      cur.next = l2
      l2 = l2.next
    }

    cur = cur.next
  }

  cur.next = l1 !== null ? l1 : l2

  //  返回最后的结果，头指针指向的那个位置，就代表新生成的链表
  return head.next
}